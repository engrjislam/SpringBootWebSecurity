# Encrypt database password

/**
 * 1. Download jasypt batch file to encrypt database password from https://sourceforge.net/projects/jasypt/files/ 
 *
 * 2. Add the bin directory of jasypt to your system path variable
 *
 * 3. Add jasypt dependency to 'build.gradle'
 *  compile('org.jasypt:jasypt-spring3:1.9.1')
 *
 * 4. Encrypt password with jasypt CLI
 *  encrypt input=xXx123 password=authKey
 *
 * Here,
 * 'xXx123'                    >  original database password
 * 'authKey'                   >  the salt that used to encrypt 'xXx123' (original password)
 * 'GxxPkJOSRMeqo9uPTPODvw=='  >  encrypted password
 * 'authKey' is required at runtime to decrypt 'GxxPkJOSRMeqo9uPTPODvw==' (encrypted password)
 *
 * You can off course decrypt 'GxxPkJOSRMeqo9uPTPODvw=='
 * decrypt input=GxxPkJOSRMeqo9uPTPODvw== password=authKey
 *
 * 5. Put the encrypted password (let's say 'GxxPkJOSRMeqo9uPTPODvw==') at application.properties
 *  spring.datasource.password=ENC(GxxPkJOSRMeqo9uPTPODvw==)
 *
 * 'authKey' will be accessed by the following command
 * maven will pass the value of 'auth.key' to java
 * -D [with no space(s)] prior to 'auth.key' that is -Dauth.key with '=' that is
 * -Dauth.key=authKey
 *
 * java will get this value by 'System.getProperty("auth.key")'
 *
 * 6. Enable System properties class & add the following code to 'build.gradle'
 *   bootRun {
 *       systemProperties System.properties
 *   }
 *
 * 7. Run the project with
 *   gradle -Dauth.key=authKey bootRun
 *
**/